#include <iostream>
#include <cassert>

using namespace std;


class User
{
	static int _staticId;
	int* _id = nullptr;
	char* _username = nullptr;
	char* _password = nullptr;
	char* _email = nullptr;

public:
	User()
	{
		cout << "Default ctor\n";
		_id = new int(_staticId++);
	}

	User(const char* username, const char* password)
	{
		cout << "Ctor with Param 1\n";

		set_username(username);
		set_password(password);

		_id = new int(_staticId++);
	}

	User(const char* username, const char* email, const char* password)
	{
		cout << "Ctor with Param 2\n";

		set_username(username);
		set_password(password);
		set_email(email);

		_id = new int(_staticId++);
	}

	// copy constructor
	User(const User& other)
	{
		cout << "copy constructor" << endl;
		_id = new int(_staticId++);
		set_username(other._username);
		set_password(other._password);

		if (other._email != nullptr)
			set_email(other._email);
	}


	// assigment operator (=)
	User& operator=(const User& other)
	{
		cout << "assigment  constructor" << endl;
		_id = new int(_staticId++);
		set_username(other._username);
		set_password(other._password);

		if (other._email != nullptr)
			set_email(other._email);

		return *this;

	}


	void set_username(const char* username)
	{
		assert(!(username == nullptr));

		if (_username != nullptr) delete[] _username;

		size_t len = strlen(username) + 1;
		_username = new char[len];
		strcpy_s(_username, len, username);
	}
	void set_email(const char* email)
	{
		assert(!(email == nullptr));

		if (_email != nullptr) delete[] _email;

		size_t len = strlen(email) + 1;
		_email = new char[len];
		strcpy_s(_email, len, email);
	}

	void set_password(const char* password)
	{
		assert(!(password == nullptr));

		if (_password != nullptr)
			delete[] _password;

		size_t len = strlen(password) + 1;
		_password = new char[len];
		strcpy_s(_password, len, password);
	};



	void print() {
		
		cout << "Id: " << (_id ? *_id : 0) << endl;
		cout << "Username: " << (_username ? _username : "null") << endl;
		cout << "Email: " << (_email ? _email : "null") << endl;
		cout << "Password: " << (_password ? _password : "null") << endl;
	}


	~User()
	{
		cout << "\nDestructor for-> " << (_id ? _id : 0) << endl;
		delete _id;
		delete[] _username;
		delete[] _email;
		delete[] _password;
	}
};


int User::_staticId = 1;



int main()
{
	

	////------------------------------
	//// Shallow  Copy => Uzden copy- etmek
	//// Bu formada copy edildikde Datalar yox address copy edilir

	////int a = 10;
	////int b = a;


	////int c = 10;
	////int* d = &c;


	//// deep copy  => derinden copy etmek
	//// deep addresin deyil addresdeki datanin basqa bir addrese copy edilmesidir
	//
	//int* b = new int(10); // x100
	//int* c = new int(*b); // x101

	// -------------------------------------------
	// -------------------------------------------
	User u1("Hesen", "hesen123");
	
	// default copy constructor isleyir (Shallow copy olur)
	
	/*User u2(u1);
	

	u1.print();
	u2.print();
	*/

	//User u2 = u1; // Copy constructoru isledir
	User u2; // Copy constructoru isledir
	u2 = u1; // assign operatoru isledir

	return 0;
}